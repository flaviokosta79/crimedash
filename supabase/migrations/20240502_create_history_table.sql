-- Create history table
CREATE TABLE IF NOT EXISTS history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  objectid INTEGER NOT NULL,
  ro VARCHAR(255) NOT NULL, -- Coluna em minúsculo para consistência
  historico TEXT NOT NULL, -- Coluna em minúsculo para consistência
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add foreign key constraint if crimes2 table exists AND constraint doesn't exist
DO $$ 
BEGIN
  -- Verifica se a tabela crimes2 existe
  IF EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = 'crimes2'
  )
  -- E também verifica se a constraint ainda não existe
  AND NOT EXISTS (
    SELECT FROM information_schema.table_constraints
    WHERE constraint_name = 'fk_history_crime'
    AND table_name = 'history'
  ) THEN
    -- Cria a constraint apenas se não existe
    ALTER TABLE history
      ADD CONSTRAINT fk_history_crime
      FOREIGN KEY (objectid)
      REFERENCES crimes2(objectid)
      ON DELETE CASCADE;
  END IF;
END $$;

-- Create index for faster lookups by RO if it doesn't exist yet
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE tablename = 'history' 
    AND indexname = 'idx_history_ro'
  ) THEN
    CREATE INDEX idx_history_ro ON history(ro);
  END IF;
END $$;

-- Add comment to the table
COMMENT ON TABLE history IS 'Histórico das ocorrências criminais';

-- Add comment to the columns
COMMENT ON COLUMN history.objectid IS 'ID do crime referenciado';
COMMENT ON COLUMN history.ro IS 'Número do Registro de Ocorrência';
COMMENT ON COLUMN history.historico IS 'Texto descritivo do histórico da ocorrência';

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_history_timestamp() 
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop trigger if exists before recreating
DROP TRIGGER IF EXISTS set_history_timestamp ON history;

-- Create trigger to automatically update the updated_at column
CREATE TRIGGER set_history_timestamp
BEFORE UPDATE ON history
FOR EACH ROW
EXECUTE FUNCTION update_history_timestamp();

-- Enable Row Level Security
ALTER TABLE history ENABLE ROW LEVEL SECURITY;

-- Drop existing policies before recreating
DROP POLICY IF EXISTS "Permitir SELECT para usuários autenticados" ON history;
DROP POLICY IF EXISTS "Permitir INSERT para usuários autenticados" ON history;
DROP POLICY IF EXISTS "Permitir UPDATE para usuários autenticados" ON history;
DROP POLICY IF EXISTS "Permitir DELETE para usuários autenticados" ON history;

-- Create RLS policies
CREATE POLICY "Permitir SELECT para usuários autenticados"
ON history
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Permitir INSERT para usuários autenticados"
ON history
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Permitir UPDATE para usuários autenticados"
ON history
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Permitir DELETE para usuários autenticados"
ON history
FOR DELETE
TO authenticated
USING (true);

-- Grant necessary permissions
GRANT ALL ON history TO authenticated;
GRANT USAGE, SELECT ON SEQUENCE history_id_seq TO authenticated;